import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.utils import to_categorical
from sklearn.metrics import accuracy_score

# Loading the CSV file into a DataFrame
data = pd.read_csv("sign_language_keypoints.csv")

# Separating features (keypoints) and labels
X = data.drop(columns=["label"]).values  # Drop the label column to get features
y = data["label"].values  # Get the label column

# Encode labels from categorical to numerical(basically gives a number to each label)
label_encoder = LabelEncoder()
y_encoded = label_encoder.fit_transform(y)  # e.g., "Hello" -> 0, "OK" -> 1, etc.
y_categorical = to_categorical(y_encoded)  # Convert to one-hot encoding for training(making binary vectors for each label)

# Spliting data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y_categorical, test_size=0.2, random_state=42)

# Defining the neural network model
model = Sequential([
    Dense(64, input_shape=(X_train.shape[1],), activation="relu"),
    Dense(32, activation="relu"),
    Dense(5, activation="softmax")  # 5 output units for 5 categories
])

# Compiling the model
model.compile(optimizer="adam", loss="categorical_crossentropy", metrics=["accuracy"])

# Training the model
model.fit(X_train, y_train, epochs=50, batch_size=4, validation_data=(X_test, y_test))

# testing the model
y_pred = model.predict(X_test)
y_pred_classes = np.argmax(y_pred, axis=1)
y_true = np.argmax(y_test, axis=1)
accuracy = accuracy_score(y_true, y_pred_classes)

print(f"Model accuracy on test data: {accuracy * 100:.2f}%")

# Save the trained model
model.save("sign_language_classification_model.h5")

# Optional: Print the label mapping for reference(just to check the mapping)
print("Label mapping:", dict(enumerate(label_encoder.classes_)))
